[
{
	"uri": "https://vasileios.github.io/ac-sc/",
	"title": "Αλγοριθμική Σύνθεση",
	"tags": [],
	"description": "",
	"content": " Αλγοριθμικη Συνθεση Αλγοριθμική Σύνθεση και Δόμηση Ήχου\n\u0026ldquo;Τεχνών Ήχου και Εικόνας\u0026rdquo;\nΙόνιο Πανεπιστήμιο\n"
},
{
	"uri": "https://vasileios.github.io/ac-sc/introduction/",
	"title": "Εισαγωγή",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Αλγοριθμικη Συνθεση Αποσπάσματα κυρίως απο το βιβλίο \"Algorithmic Composition: Paradigms of Automated Music Generation\" (Nierhaus 2009).\nΟ αλγόριθμος είναι:\n \"- Ένα σύνολο μαθηματικών οδηγιών που πρέπει να ακολουθηθούν για τον υπολογισμό μιας απάντησης σε ένα μαθηματικό πρόβλημα. Μια συστηματική διαδικασία που παράγει - σε ένα πεπερασμένο αριθμό βημάτων την απάντηση σε μια ερώτηση ή τη λύση ενός προβλήματος. [...] (ιδίως για υπολογιστές) ένα σύνολο κανόνων που πρέπει να ακολουθηθούν για να επιλυθεί ένα συγκεκριμένο πρόβλημα\". (Nierhaus 2009 σ.2)  Αλγοριθμική σύνθεση \"Ο όρος παραπέμπει πως οι κανόνες αυτοί προέρχονται κυρίως από τον χώρο των μαθηματικών, με τη μορφή απλών αριθμητικών πράξεων ή περισσότερο σύνθετων δομών όπως για παράδειγμα στατιστικά μοντέλα, σύνολα, συναρτήσεις, γεωμετρίες κ.λπ. Σε άλλες περιπτώσεις ακολουθούνται διαφορετικές προσεγγίσεις οι οποίες προέρχονται από ένα πλήθος διαφορετικών πεδίων: εξελικτικά βιολογικά μοντέλα και γενετικοί αλγόριθμοι, ειδικές γραμματικές, συστήματα μηχανικής μάθησης και τεχνητής νοημοσύνης, κυτταρικά αυτόματα κ.ο.κ.\" (Λώτης \u0026 Διαμαντόπουλος 2015 254)\n"
},
{
	"uri": "https://vasileios.github.io/ac-sc/introduction/history/",
	"title": "Ιστορία",
	"tags": [],
	"description": "",
	"content": "chapter 1 Ιστορια Μουσική και μαθηματικά.\nΠυθαγόρας\nΟ ήχος των σφυριών των σιδηρουργών έκανε τον Πυθαγόρα να βγάλει σημαντικά συμπεράσματα σχετικά με τη φύση του τονισμού και τα μαθηματικά με βάση την αρμονία μετά τη σύγκριση των τονισμών που έγιναν απο τα σφυριά.\nGuido D'Arrezo\nΕπίσης, στο πλαίσιο της αλγοριθμικής σύνθεσης, γύρω στο AD 1000 είχε αναπτυχθεί η πρώτη προσέγγιση στην αυτόματη γένεση της μουσικής δομής. Ο Guido του Arezzo (γύρω στο 991-1031) συνέβαλε στην ανάπτυξη της σημειογραφίας, ανέπτυξε το 'solfeggio' (1025) και ήταν ένας σημαντικός μουσικός θεωρητικός της μεσαιωνικής εποχής. Ένα από τα σημαντικότερα έργα του, το \"Micrologus\", είναι η πρώτη συλλογή της μονοδικής και πολυφωνικής πρακτικής τραγουδιού. Εφηύρε μια μέθοδο για την αυτόματη μετατροπή του κειμένου σε μελωδικές φράσεις. Για παράδειγμα, τα φωνήεντα στο κείμενο μπορούν να χαρτογραφηθούν σε διαφορετικές θέσεις τονισμού.\n Πολυφωνία, Motet 12-13ος αιώνα  To motet μαζι με τη ανάπτυξη της μουσικής σημειογραφίας είχαν μεγάλη σημασία για την ανάπτυξη της αλγοριθμικής σύνθεσης.\nΟ Leonin με το \"Magnus liber organi de gradali et antiphonario\", μια συλλογή από χωρικά (chorales), είναι απο τους πρώτους που ασχολήθηκε με την πολυφωνία και το μοτετ.\nΑπο τις αρχές του 12ου αιώνα μέχρι τις αρχές του 13ου αιώνα με τους Perotin και Petrus de Cruce, το motet εξελίχθηκε από συνθέτες όπως ο Philippe de Vitry (γύρω στο 1291-1361), και αργότερα με τον Giovanni Pierluigi Palestrina (1525–1594)\nΗ αρχή του ισόρυθμου (isorhythm), που εφευρέθηκε από τον Philippe de Vitry και εξελίσεται με τον Guillaume de Machaut, αποτελείται από πολλαπλά επαναλαμβανόμενα μελωδικά και ρυθμικά μοντέλα τα οποία αλληλεπιδρούν μεταξύ τους και μπορούν να εμφανιστούν σε διαφορετικές αναλογίες.\nDe Vitry\nMachaut\n'Αλλα γνωστά παραδείγματα, στην εποχή του Μπαρόκ όπως η τεχνική των δώδεκα τόνων του Bach \"The Art of Fugue\" καθώς και τεχνική του Schönberg τον 20ο αιώνα, οδηγούν συχνά στην ανάπτυξη της πολυπλοκότητας αποκλειστικά στο πλαίσιο της ευρωπαϊκής ή δυτικής μουσικής τέχνης.\nArs Magna\nΑν οι προαναφερθείσες αρχές αντιπροσωπεύουν τις αρχές της αλγοριθμικής χειραγώγηση του μουσικού υλικού, τότε το \"Ars Magna\" του Raimundus Lullus διαπραγματεύεται αποτελεσματικά την έννοια του υπολογιστικού μουσικού συστήματος.\nΟι αναλογίες σχετικά με το hardware και το λογισμικό, τη μνήμη δεδομένων, το πρόγραμμα κλπ. είναι εμφανείς στα συστατικά, τους ορισμούς και τους κανόνες του \"Ars Magna\".\nAthanasius Kircher\nO Kircher με το μουσικολογικό έργο του \"Musurgia Universalis\" από το 1650 επιρρέασε στην ανάπτυξη της δυτικής μουσικής - ιδιαίτερα στους J.S.Bach (1685-1750) και Beethoven (1770-1827)(Glasgow University).\nΜία απο τις δημιουργίες του ήταν και μια συσκευή που είχε ως σκοπό τη σύνθεση εκκλησιαστικής μουσικής και απο μή μουσικούς. Το Arca Musarithmica θεωρείται αλγοριθμική σύνθεση σε φυσική μορφή.\nΤο σύστημα αυτό αποτελείται από τρεις κατηγορίες ετικετών ξύλινων ραβδιών (συντάγματα) στις οποίες χαράσσονται και αριθμοί και ρυθμικές αξίες. Το σύστημα του Kircher επιτρέπει την αυτόματη δημιουργία συνθέσεων με το στυλ της απλής αντίστιξης. Σε μια προχωρημένη μορφή, μπορεί να παραχθεί υλικό για συγκεκριμένα στυλ μουσικής.\nδείτε εδω περισσότερα\nLeibniz (1646-1716)\nLeibniz\n\"Καθολική γλώσσα\"\nΤυποποίηση των επιστημών.\n..υποδομήστε τη λύση οποιουδήποτε επιστημονικού προβλήματος μέσα σε ένα ολοκληρωμένο Λογισμό.\nΗ έννοια της καθολικής γλώσσας ήταν επίσης ένα όραμα διακρατικής επικοινωνίας στην Ευρώπη μετά τον τριακονταετή πόλεμο.\nΠροϋποθέσεις του προγράμματος:\n Προκατασκευή εγκυκλοπαίδειας (ορισμοί) για τις τυπικές επιστήμες.   Ανάπτυξη ενός επίσημου συστήματος, δηλαδή \"lingua universalis\", στο οποίο μπορούν να κωδικοποιηθούν όλοι οι επιστημονικοί όροι.   Δημιουργία του \"λογισμού εγκυρότητας\" που θα επιτρέψει τη σύνδεση όλων των όρων της παγκόσμιας γλώσσας με λογικές λειτουργίες.  Χρήση συμβόλων για την αναπαραγωγή όλων των επιστημονικών όρων.\nΩς σύνολο συμβόλων, ο Λαίμπνιτς επέλεξε να είναι η ομάδα των φυσικών αριθμών.\nΓια παράδειγμα,\n  Πράγμα = 2  Όν = 6 = 2 * 3  Ανθρώπινο Όν = 30 = 6 * 5  κ.λπ.  \"Η μουσική είναι μια ασκούμενη μαθηματική εξάσκηση, το nescientis είναι αριθμητική animi\" (\"Η μουσική είναι μια κρυμμένη αριθμητική άσκηση της ψυχής, η οποία δεν γνωρίζει ότι μετράει\").\nΥπολογιστική διαδικασία \u0026 μηχανές - Calculus\nΗ μηχανοποίηση των υπολογιστικών διαδικασιών, 1617 ξεκίνησε από τη Σκωτία απο τον μαθηματικό John Napier και Jost Bürgi (1552-1632) πρωτοστάτησαν στο πεδίου των λογαρίθμων με το \"Mirifici logarithmorum canonis\" descriptio \"που εμφανίζεται το 1614, σχεδιασμένο για πολλαπλασιασμό και διαίρεση, με βάση την αρχή του Πυθαγόρειου άβακα. (1550-1617).\nΟ άβακάς του Napier, γνωστό και ως οστά του Napier (Napier's bones).\nNapier's bones\nΠαρόμοια με τα οστά του Napier:\nCaspar Schott (1608-1666), \"Organum Mathematicum\" (1668)\nΗ ιδέα του Leibniz για την εφαρμογή του δυαδικού αριθμητικού συστήματος σε ένα αυτοματισμό πραγματοποιήθηκε με μια εφεύρεση στην κλωστοϋφαντουργία. Το έτος 1725 ο Basile Bouchon ανέπτυξε το πρώτο σύστημα αυτόματου ελέγχου Αργαλειών (Bouchon loom).\nBabbage-Lovelace 18ος αιώνας\nΒασικός στόχος του Babbage είναι η μηχανοποίηση των διαδικασιών υπολογισμού, όπως αυτές απαιτούνται για τη δημιουργία πινάκων λογαρίθμου.\nΠαράλληλα με το Babbage, η Ada Countess of Lovelace (1815-1852) διαδραμάτισε σημαντικό ρόλο. Ήταν ένας αυτοδίδακτος μαθηματικός και συνεργάστηκε με τον Babbage στην έννοια του «αναλυτικού κινητήρα» (analytical engine).\nAda Lovelace\nΤο 1840, ο Babbage έδωσε μια σειρά μαθημάτων στο Τορίνο για την εφεύρεσή του. Με βάση αυτό το υλικό, ο Ιταλός μαθηματικός Luigi Federico Menabrea δημοσίευσε το άρθρο “Notions sur la machine analytique de Charles Babbage” το 1842. Η Ada Lovelace μετέφρασε αυτό το κείμενο στα αγγλικά το 1843 και πρόσθεσε τις δικές της αναλυτικές εκτιμήσεις για το υλικό, συμπεριλαμβανομένων των εννοιών loop, subroutine and the conditional jump (βρόχου, της υπορουτίνας και του άλματος υπό όρους). Η κοντέσσα της Lovelace θεωρείται η πρώτη γυναίκα προγραμματιστής στην ιστορία του προγραμματισμού ηλεκτρονικών υπολογιστών - το πρόγραμμα Ada, που αναπτύχθηκε στη δεκαετία του 1970, πήρε το όνομά της.\nΕπιπλέον, μπορούν να βρεθούν οι πρώτες εφαρμογές αλγορίθμων για εργασίες σύνθεσης στο δημοφιλές \"μουσικό παιχνίδι με ζάρια\" τον 18ο αιώνα.\nΤο πρώτο παιχνίδι των ζαριών είναι το \"Der allezeit fertige Menuetten- und Polonaisencom- ponist\" του Johann Philipp Kirnberger, το οποίο σχεδιάστηκε το 1757, μέχρι το έτος 1812, δημιουργήθηκαν τουλάχιστον 20 άλλες δημιουργίες αυτού του τύπου. (Nierhaus 2009 36)\nΛογικές λειτουργίες\nBoole (1815-1864)\nΟ George Boole (1815-1864) ο οποίος ανέπτυξε στο συγγραφικό του έργο «Η Μαθηματική Ανάλυση της Λογικής» (1847) και «Διερεύνηση των νόμων της σκέψης» (1854) έχει εκπροσωπήσει τον φορμαλισμό για την παρουσίαση της προτασιακής λογικής.\nShannon (1916-2001)\nAlgebra Boolean σε ηλεκτρονικά κυκλώματα\n  X1\u0026or;(X4\u0026and;(X2\u0026and;X3))  ο Γιάννης Ξενάκης (1922-2001) σε διάφορες συνθέσεις του εφάρμοσε λογικούς συνδυασμούς για τη δημιουργία μουσικής δομής από τη θεωρία των κοσκίνων.\nΤο φάσμα εφαρμογών της λογικής επεκτέινεται με ένα σύστημα που ειναι ο προπομπός της σημερινής \"first-order logic\". ο βασικός υπολογισμός γίνεται ένας μηχανισμός θεμελιώδους μαθηματικής έρευνας, των οποίων οι στόχοι οδηγούν σε πολώσεις μεταξύ των επιστημόνων. Οι «φορμαλιστές» του David Hilbert (1862-1943) είχαν ως στόχο να θέσουν βασικούς μαθηματικούς χώρους σε μια αξιωματική βάση και να αποδείξουν την συνοχή τους. Αντίθετα, οι \"Διανοούμενοι\" που ιδρύθηκαν από τον Luitzen Egbertus Jan Brouwer (1881-1966), δεν συμφωνούσαν με τους φορμαλιστές και προκάλεσαν τον David Hilbert, σε μια επική προσπάθεια, να θέσει την αριθμητική των φυσικών αριθμών σε μια αξιωματική επιβεβαιωμένη βάση και επίσης να αποδείξει τη συνοχή των μαθηματικών πεδίων, όπως η θεωρία των συνόλων.\n\"Theoretical Logic\" Automatic processing of Logical Calculus.\nDecidability Problem\nThe idea that there could be an algorithm being able to decide for any first order logical expression if its statement is true or false. or the halting problem of a Turing machine.\nKurt Gödel\nΜε το \"On Formally Undecidable Propositions of the Principia Mathematica Related Systems \"\no Kurt Gödel το 1931 καθόρισε σαφή όρια στις προσπάθειές τους (the predicate calculus). Έδειξε πρώτα ότι σε ένα αρκετά ισχυρό σύστημα που περιέχει τουλάχιστον αριθμητική, η συνέπεια του συστήματος δεν μπορεί να αποδειχθεί μέσα στο σύστημα. Δεύτερον, κατάφερε να αποδείξει ότι σε ένα τέτοιο σύστημα μπορούν να γίνουν προτάσεις που στο πλαίσιο αυτού του συστήματος δεν είναι ούτε αποδεδειγμένες ούτε ασυμβίβαστες.\nJohn von Neumann\nJohn von Neumann\n John von Neumann (1903-1957) - game theory and quantum mechanics, Von Neumann architecture in computing, linear programming, self-replicating machines, stochastic computing.  IAS computer 1952 (5 kilobytes capacity)\nTheory of Self-Reproducing Automata\nWorkable definition of an algorithm\nDavid Hilbert\n Hilbert's decision problem Given a mathematical proposition, can one find an algorithm to decide whether the proposition is true or false?  Alan Turing\nTuring's Thesis was that:\nAny \"algorithm\" can be carried out by one of his machines.\nTuring Machine\n  Infinte tape  Symbols 0, 1 and blank \"\"  Read/Write head  Read the symbol on the square under the head.  Leave it unchanged or edit the symbol by writing another symbol.  Move the tape left or right by one square so that the machine can read  and edit the symbol on a neghbouring square.   Cracking Enigma Machine  A Polyalphabetic machine.\n The Imitation Game  Mind A Quarterly review of Psychology and Philosophy Computing machinery and Intelligence\n The Turing Test  Computers between 1930s and 50s\nBell Laboratory:\nKonrad Zuse\n Zuse3 or Z3 1941  Από το 1934 έως το 1938, ο Konrad Zuse ανέπτυξε το πρώτο του μοντέλο υπολογιστικής μηχανής με βάση το πρόγραμμα. Το Z1 (Zuse 1) κατασκευάστηκε αποκλειστικά από μηχανικά εξαρτήματα. Ο Zuse χρησιμοποίησε μια μνήμη ικανή να αποθηκεύσει 16 δυαδικούς αριθμούς 24 bit, ο καθένας από τους οποίους αποτελείται από μεταλλικά φύλλα που μπορούν να επανατοποθετηθούν. Παρόλο που η ιδέα του θεωρήθηκε σωστή, προέκυψαν κάποια προβλήματα λόγω του μηχανικού φορτίου υλικού. Στα μοντέλα παρακολούθησης Z2 (1940) και Z3 (1941), τα μηχανικά στοιχεία μεταγωγής αντικαταστάθηκαν από ρελέ. Το Z3, που θεωρείται ο πρώτος προγραμματιζόμενος ηλεκτρονικός υπολογιστής, επέτρεψε την επεξεργασία \"floating-point numbers\" που δεν εφαρμόστηκαν σε παρόμοια μοντέλα, όπως Mark I, ENIAC και άλλα, της εποχής εκείνης. Η (half-logarithmic notation ) που χρησιμοποιείται από τον Zuse επιτρέπει μια πιο αποτελεσματική αριθμητική αναπαράσταση από τη \"fixed-point notation\" που χρησιμοποιείται σε παρόμοια μοντέλα υπολογιστών.\nHoward Hathaway Aiken\n Mark I Από το 1934, ο Howard Hathaway Aiken (1900-1973) σχεδίασε, σε συνεργασία με την IBM, το Mark I, το οποίο παρουσιάστηκε για πρώτη φορά στο Harvard το 1944. Η μηχανή του Aiken βασίζεται στο δεκαδικό σύστημα και αποτελείται από μια διασύνδεση των μηχανών του Hollerith τον υπολογισμό των γενικών αριθμητικών εργασιών.   Mark Ι sequentially programmed step by step one operation after the other.  The Mark I also computed and printed mathematical tables, which had been the initial goal of British inventor Charles Babbage for his \"analytical engine\".\nH Grace Murray Hopper (1906-1992) εργάστηκε στον προγραμματισμό του Mark I, υπογράφοντας την έννοια της υπορουτίνας (subroutine) και συνέβαλε σημαντικά στην ανάπτυξη του πρώτου μεταγλωττιστή (compiler), ο οποίος ολοκληρώθηκε το 1952 ως στρατιωτική εφεύρεση. Η Grace Hopper ήταν μαζί με την Ada Lovelace μία από τις γυναίκες πρωτοπόρους της ανάπτυξης ηλεκτρονικών υπολογιστών και μετά το 1945 προήχθη σε ναύαρχο για να γίνει η ανώτατη γυναίκα του αμερικανικού στρατού.\nJohn Vincent Atanasoff\n ABC Μεταξύ 1937 και 1942, ένας δυαδικός υπολογιστής (binary computer) για την επίλυση συστημάτων εξισώσεων αναπτύχθηκε από τον John Vincent Atanasoff (1903-1995) και από τον υποψήφιο διδάκτορα του Clifford Edward Berry (1918-1963) στο Iowa State College. Ο υπολογιστής Atanasoff-Berry (σύντομος: ABC) εγκατέλειψε εντελώς την περίπλοκη τεχνολογία των μηχανικών ρελέ υπέρ των νέων σωλήνων ηλεκτρονίων και διέθεσε μια δυναμική μνήμη καθώς και ανεξάρτητες μονάδες υπολογισμού.  John Mauchly and J. Presper Eckert\n John Mauchly and J. Presper Eckert in 1946 with ENIAC computer. ENIAC used patching and it wasn't sequentially programmed.  Maurice Wilkes\n Maurice Wilkes EDSAC 1949 (Electronic Delay Storage Automatic Computer)  \"First Draft of a Report on the EDVAC\" by John von Neumann 1945.\nThis report outlines the computer architecture for the next 50 years.\nO EDCVAC σε αντίθεση με το ENIAC I, το οποίο βασίζεται στο δεκαδικό σύστημα, η αναπαράσταση δεδομένων είναι δυαδική. Οι εντολές βρόχου και άλματος ήταν δυνατές και αργότερα, με βάση την έννοια του John von Neumann (1903-1957), κατέστη δυνατή η αποθήκευση εντολών προγράμματος πέρα από τα δεδομένα στη μνήμη.\n John Von Neumann - IAS machines (Institute for Advanced Studies at Princeton) (1946-1952).  Χρησιμοποιώντας ηλεκτροστατικό σωλήνα αποθήκευσης ως εναλλακτική λύση στις Mercury delay lines.\nΑυτή η εναλλακτική λύση προσέφερε την τυχαία πρόσβαση παρά την κυκλική πρόσβαση - \"read in parallel rather than serially\".\nVon Neumann machines (parallel binary machines)\n UNIVAC   MANIAC (Los Alamos) 1952  Δείτε παρακάτω ένα ντοκιμαντέρ σχετικά με την ιστορία και τους εφευρέτες των υπολογιστών.\nComputer Pioneers\nΑλγοριθμική σύνθεση τον 20ο αιώνα Iannis Xenakis και αλγοριθμική σύνθεση.\nFormalised Music (\"aesthetic efficiency\")\n"
},
{
	"uri": "https://vasileios.github.io/ac-sc/introduction/paradigms/",
	"title": "Παραδείγματα",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Παραδειγματα Μαρκοβιανά Μοντέλα - Markov models time dependent random variables (TDRV)\nΣτο πλαίσιο των πειραμάτων και παρατηρήσεων σχετικά με την TDRV έχουν ήδη γίνει από τους Pierre Simon de Laplace και Daniel Bernoulli. Η πρώτη εφαρμογή αυτής της μεθόδου ήταν μια εκτενή ανάλυση κειμένου από τον Markov: \"Το 1913 ο Markov είχε δημοσιεύσει την τρίτη έκδοση του εγχειριδίου του. Σε αυτή την έκδοση γράφει: «Ας τελειώσουμε το άρθρο και ολόκληρο το βιβλίο με ένα καλό παράδειγμα TDRV, που μπορούν να θεωρηθούν ως μια απλή αλυσίδα» (chain).\n Markov chains or models    Markov chain - Markov process: Ένα στοχαστικό μοντέλο ή διαδικασία ... η πιθανότητα κάθε συμβάν εξαρτάται μόνο από την κατάσταση που επιτεύχθηκε στο προηγούμενο συμβάν.  Ο όρος \"αλυσίδα Markov\" (ή Markov Models για αυτή την κατηγορία των στοχαστικών διαδικασιών χρησιμοποιήθηκε για πρώτη φορά το 1926 σε μια δημοσίευση του Ρώσου μαθηματικού Σεργκέι Νατανοβιτς Μπερνστάιν.\nΟ Markov μελέτησε τη σειρά των 20.000 γραμμάτων στο ποίημα του AS Pushkin «Eugeny Onegin», ανακαλύπτοντας ότι η σταθερή πιθανότητα των φωνηέντων σε αυτό το ποίημα είναι p = 0,432, η πιθανότητα ενός φωνήεντος να ακολουθείται απο ένα άλλο είναι p1 = 0,128 και ότι η πιθανότητα ενός φωνήεντος να ακολουθείται απο σύμφωνο είναι p2 = 0.663. (στοχατική διαδικασία)\n  Stochastic processes are used to describe a sequence of random events dependent on the time parameter (t).  To πεδίο της στοχαστικής διαδικασίας περιλαμβάνei υπολογίσμο πιθανοτήτων, (probability calculus) και σταστιστική.\nΣε μια στοχαστική αλυσίδα, κάθε διακριτός χρόνος t έχει μια τυχαία μεταβλητή Χ. Σε μια αλυσίδα Markov, η οποία είναι ένα ιδιαίτερο είδος στοχαστικής αλυσίδας, η πιθανότητα της μελλοντικής κατάστασης Xtm+1 (η τυχαία μεταβλητ Χ τη στιγμή t + 1) εξαρτάται από την τρέχουσα κατάσταση Xt. Για τους δεδομένους χρόνους tm και tm+1, αυτή η πιθανότητα είναι:\n  Stochastic Process - Markov Chain  P(Xtm+1=j|Xtm=i)=Pij(tm,tm+1)  Markov models in algorithmic composition\nH εφαρμογή των διεργασιών Markov στη δημιουργία μουσικών δομών Εξετάστηκε πρώτα από τον Harry F. Olson (1901-1982) περίπου το 1950. Ο Olson ήταν Αμερικανός ηλεκτρολόγος μηχανικός και φυσικός που επικεντρώθηκε στην ακουστική έρευνα. Μαζί με τον Henry Belar, ανέπτυξε το \"Electronic Synthesizer\" το 1955, το πρώτο μηχάνημα που ονομάστηκε \"συνθεσάιζερ\".\ntransition probabilities\nΟ Hiller και ο Isaacson το 1955 με 1956 χρησιμοποιούν Markov μοντέλα για την παραγωγή της μουσικής δομής με το \"Illiac Suite\".\nHiller \u0026 Iaacson: The Illiac Suite\nΜεταξύ άλλων, αυτά τα μοντέλα Markov χρησιμεύουν για την μουσική σύνθεση διαφόρων ειδών μουσικής. Τα μοντέλα Markov χρησιμοποιούνται ως επί το πλείστον στον τομέα της μίμησης του στυλ μουσικής. Έχουν χρησιμοποιηθεί και απο τον Ξενάκη, σαν τεχνικές σύνθεσης μουσικού υλικού στα έργα του το 1958. Στα \"Analogique A\" χρησιμοποιούνται μοντέλα Markov για την οργάνωση τμημάτων διαφορετικής πυκνότητας (segments of differing density arrangement).\nXenakis Analogique A\nGenerative grammars Οι γενετικές γραμματικές είναι μέθοδοι για την αλγοριθμική σύνθεση και τη μουσική ανάλυση. Το βασικό γλωσσικό μοντέλο που ανέπτυξε ο Noam Chomsky το 1957, είναι το αρχικό σημείο για την εφαρμογή αυτών των γενικών αρχών στη μουσική.\nTHe representation of language rules have been classified into four types (zero to three) by Noam Chomsky (1957) (Holtzman 2015)\nΤα έργα των Roads, Steedman, Sundberg, Lerdahl, Jackendoff και άλλων από τη δεκαετία του '70 αναδεικνύουν την εφαρμογή γενετικών γραμματικών στην παραγωγή και την ανάλυση της μουσικής δομής. Τα πεδία που χρησιμοποιούν συχνά γενετικές γραμματικές είναι η παραδοσιακή ευρωπαϊκή μουσική, η τζαζ, καθώς και η μουσική εθνολογία. Σχετικοί φορμαλισμοί με τις γενετικές γραμματικές είναι τα αυξημένα μεταβατικά δίκτυα (augmented transition networks), τα οποία χρησιμοποιούνται στην περίπτωση του David Cope.\nΜεταβατικά δίκτυα-Transition networks Το πρόγραμμα του David Cope “EMI” Το “EMI” δημιουργεί απομιμήσεις αφού πρώτα αναλύσει έναν επαρκή αριθμό συνθέσεων ενός συγκεκριμένου είδους όπως για παράδειγμά νόμους και κανόνες σύνθεσης της σονάτας.\nEMI history\nDavid Cope music\nchaos and self-similarity Ο όρος \"χάος\" προέρχεται από την ελληνική γλώσσα και αρχικά σήμαινε \"διάστημα\" ή \"άβυσσο\".\nΣήμερα, η λέξη χρησιμοποιείται συνειδητά με την έννοια της \"διαταραχής\", όρος που αποκτήθηκε τον 17ου αιώνα. Σε ένα μαθηματικό και φυσικό περιβάλλον, η Χαοτική θεωρία σε στενότερη έννοια αναφέρεται επίσης ως η θεωρία της μη γραμμικής δυναμικής (non-linear dynamics). Το 1975, ο όρος \"χάος\" εισήχθη στον τομέα των μαθηματικών από τους Tien-Yien Li και James Yorke.\nΤο πιο γνωστό παράδειγμα περίπλοκης συμπεριφοράς συστήματος πηγαίνει πίσω στο Lorenz ο οποίος το 1963 ανέπτυξε ένα σύστημα τριών συζευγμένων μη γραμμικών διαφορικών εξισώσεων ως ένα απλοποιημένο μοντέλο για την ατμοσφαιρική ροή.\nΤο \"φαινόμενο της πεταλούδας\": Ένα πτερύγιο των πτερυγίων μιας πεταλούδας προκαλεί ελάχιστη αναταραχή, η οποία ωστόσο, κατά τη διάρκεια της ντετερμινιστικής χαοτικής ανάπτυξης του συστήματος, μπορεί να οδηγήσει σε εντελώς απρόβλεπτες μετεωρολογικές συνέπειες και σε πολύ απομακρυσμένες περιοχές.\nFractals, Lindenmayer systems\n Fractal geometry (Fragmented): Mandelbrot, Random walk, brown noise, etc L-systems: biology - Growth of living organisms such as algea and plants.  Γενετικοί αλγόριθμοι-Genetic algorithms Οι γενετικοί αλγόριθμοι ώς μιά κλάση των εξελικτικών αλγορίθμων (evolutionary algorithms), για παράδειγμα, στρατηγικών μοντέλων για φυσικά συστήματα, είναι στοχαστικές τεχνικές αναζήτησης.\nΤα βασικά μοντέλα εμπνεύστηκαν από τη θεωρία της εξέλιξης του Δαρβίνου.\nΟι Γενετικοί αλγόριθμοι, χρησιμοποιούνται για την μοντελοποίηση της εξελικτικής διαδικασίας στον υπολογιστή.\nΗ ορολογία των γενετικών αλγορίθμων συμπεριλαμβανομένης της \"επιλογής\", της \"μετάλλαξης\", της \"επιβίωσης του ικανότερου\", κλπ. σχετίζεται με τις διαδικασίες βιολογικής επιλογής.\nΑπό τη δεκαετία του 1960, οι Ingo Rechenberg και Hans-Paul Schwefel εισήγαγαν τις στρατηγικές εξέλιξης στο Τεχνικό Πανεπιστήμιο του Βερολίνου και στη δεκαετία του 1970 οι Αμερικανοί John H. Holland και David E. Goldberg ανέπτυξαν γενετικούς αλγόριθμους. Τα μοντέλα Rechenberg και Schwefel βασίζονται σε μια γραφική παράσταση και έχουν διαμορφωθεί με βάση βιολογικές διαδικασίες για την ανάπτυξη τεχνικών βελτιστοποίησης.\nJohn Henry Holland\nGENETIC ALGORITHMS AND ADAPTATION\nΑυτή η κατηγορία αλγορίθμων είναι ιδιαίτερα κατάλληλη για εργασίες που είναι δύσκολο να μοντελοποιηθούν μαθηματικά και που δεν έχουν ένα σαφές σύστημα κανόνων.\nΚυτταρικά αυτόματα-Cellular automata Τα \"Κυτταρικά Αυτόματα\" δημιουργήθηκαν για πρώτη φορά στη δεκαετία του 1940 και κέρδισαν μεγάλη δημοτικότητα αφού δημοσιεύτηκαν στο \"Scientific American\" το 1970. Αυτή η κατηγορία αλγορίθμων μπορεί να παρουσιάσει εξαιρετικά περίπλοκη συμπεριφορά με βάση σχετικά απλούς αρχικούς κανόνες. Τα κυτταρικά αυτοματοποιημένα συστήματα είναι λιγότερο κατάλληλα για εφαρμογές απομίμησης ύφους (style imitation).\nΟ Miranda περιγράφει διάφορες εφαρμογές μοντέλων κυτταρικών αυτομάτων (CA) για μουσικές εφαρμογές. Σε ένα από αυτά, το Chaosynth, ένας χημικός ταλαντωτής χρησιμοποιείται για την παραμετροποίηση μιας μηχανής κοκκώδους σύνθεσης (Miranda 2000).\nNeural networks Τα \"Νευρωνικά Δίκτυα\" δημιουργήθηκαν αρχικά για εργασίες αναγνώρισης εικόνων. Η εννοιολογική τους σχέση με την επεξεργασία βιολογικών πληροφοριών είναι ένας λόγος για τη μεγάλη τους δημοτικότητα. Στην αλγοριθμική σύνθεση, τα νευρωνικά δίκτυα μπορούν να δημιουργήσουν εξόδους, των οποίων οι ακολουθίες των νοτών δεν είναι απαραίτητο να υπάρχουν στη \"συλλογή\" (corpus) του συστήματος. Μειονεκτήματα υπάρχουν στον χειρισμό του μουσικού υλικού που βασίζετε σε κάποια περιεχόμενα (content-sensitive) έτσι ώστε να αποδώσει στο πλαίσιο μακρινών περσμάτων, τα οποία μπορούν να αντιμετωπιστούν καλύτερα σε γενετικές γραμματικές. Για εφαρμογές αλγοριθμικής σύνθεσης, τα Νευρωνικά Δίκτυα χρησιμοποιούνται συχνά στο πλαίσιο των υβριδικών συστημάτων. μπορούν να βρεθούν ενδιαφέρουσες προσεγγίσεις όσον αφορά τις κατάλληλες αναπαραστάσεις για μουσικές πληροφορίες.\nArtificial intelligence Η \"Τεχνιτή Νοημοσύνη\" περιλαμβάνει μια ποικιλία διαδικασιών για διαφορετικά tasks. Προγράμματα όπως το \"ELIZA\" ή το γνωστό \"Turing test\" εγείρουν το ζήτημα του ορισμού του όρου \"intelligence\" \"νοημοσύνη\".\nΟ Alan Turing ανέπτυξε μια εικονική εγκατάσταση για να αξιολογήσει την έξυπνη συμπεριφορά ενός υπολογιστή. Στην αρχή των σκέψεών του, σχεδίασε ένα παιχνίδι στο οποίο ένα άτομο πρόκειται να μαντέψει το φύλο δύο άλλων συνομιλητών.\nSwarm Algorithms  Συλλογική Συμπεριφορά   Η συμπεριφορά των σμήνων  Μαθηματικά μοντέλα για την προσομοίωση και την εκτέλεση της συμπεριφοράς.\nΤρεις βασικοί κανόνες\n Ακολουθήστε την ίδια κατεύθυνση με τους γείτονές σας Μείνετε κοντά στους γείτονές σας Αποφύγετε τις συγκρούσεις με τους γείτονές σας  Αλγόριθμοι ελέγχου\nSwarm Music\nΕκπαιδευτικά σεμινάρια\nΤο έργο του Tim Blackwell για τη μουσική Swarm\nΤο μοντέλο βασίζεται στον διαχωρισμό, την ευθυγράμμιση και τη συνοχή. Ο διαχωρισμός σημαίνει ότι κάθε πτηνό πρέπει να κατευθυνθεί έτσι ώστε να αποφευχθεί η πρόσκρουση μεταξύ τους ή με το περιβάλλον. Η ευθυγράμμιση κάθε πτηνού κινείται σε παρόμοιο μονοπάτι λαμβάνοντας τη μέση τιμή των κεντρικών πτηνών. Η συνοχή διατηρεί το σμήνος μαζί, καθώς κάθε πτηνό κατευθύνεται προς τη μέση θέση των κεντρικών πτηνών.\nΟ Blackwell δημιούργησε έναν παρόμοιο αλγόριθμο ο οποίος παραμετροποιούσε μια μηχανή κοκκώδους σύνθεσης, δημιουργώντας σε ήχο την κίνηση του σμήνους σε σχέση με τον χρόνο.(Husbands 2007 22)\nLive electronics improvisation  Mουσικά ή / και αισθητικά κίνητρα.  Σύντομη ανάλυση των βασικών συνιστωσών του συστήματος, της διεπαφής χρήστη και των τεχνικών παραγωγής ήχου. Αξιολόγηση της αισθητικής ποιότητας των αποτελεσμάτων και περιγραφή της βελτίωσης και επέκτασης του συστήματος.  Περιλαμβάνει: computer synthesis techniques, hardware and software interface design.\nListening: Musica Elettronica Viva (MEV)\nListening: Boris \u0026 Merzbow Boiler Room Tokyo Live Set\nListening: AMM The Great Hall Laminal, 1982\nMusical Interfaces\n Midi Keybords or instruments GUIs Microcontrolers Sensors Microcomputers  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/introduction/tuning_scales/",
	"title": "Κλίμακες και Χορδίσματα",
	"tags": [],
	"description": "",
	"content": "chapter 1 Scales Circle of fiths is the relationship among the 12 tones of the chromatic scale, their corresponding key signatures, and the associated major and minor keys.\nCircles of Fifths\nOther Tunings and Scales\n Intervals (διαστήματα)  // ===================================================================== // SuperCollider Workspace // ===================================================================== s.boot s = Server.internal; s.boot; {SinOsc.ar([440, 440*81/64, 440*3/2])}.scope // pythagorian tuning: see leimma halftome of 256/243 between its major third and the perfect fourth (Harmonograph-A Visual Guide to The Mathematics of Music) {SinOsc.ar([440, 440*5/4, 440*3/2])}.scope // Diatonic tuning {SinOsc.ar([440, 440*6/5, 440*3/2])}.play // Minor third diatoniic 2/1-\u0026gt;octave 3/2-\u0026gt;perfect fifth 9/8-\u0026gt;semitone 4/3-\u0026gt; perfect fourth 81/64-\u0026gt;major third  Pythagorian Interval\nInterval from D Formula Frequency - ratio Size (cents) ET-dif (cents)\n  A♭  diminished fifth  588.27  -11.73  E♭  minor second  90.22  −9.78  B♭  minor sixth  792.18  −7.82  F  minor third  294.13  −5.87  C  minor seventh  996.09  −3.91  G  perfect fourth  498.04  -1.96  D  unison  0 .00  0.00  A  perfect fifth  701.96  1.96  E  major second  203.91  3.91  B  major sixth  905.87  5.87  F♯  major third  407.82  7.82  C♯  major seventh  1109.78  9.78  G♯  augmented fourth  611.73  11.73  Scales in SuperCollider\n( a = Scale.aeolian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.augmented; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.augmented2; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.bartok; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.chinese; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.chromatic; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.chromatic24; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.diminished; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.diminished2; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.dorian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.egyptian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.enigmatic; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.harmonicMajor; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.harmonicMinor; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.hexAeolian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.hexDorian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.hexMajor6; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.hexMajor7; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.hexPhrygian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.hexSus; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.hindu; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.hungarianMinor; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.indian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.ionian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.locrian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.lydian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.major; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.majorPentatonic; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.melodicMajor; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.melodicMinor; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.melodicMinorDesc; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.minor; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.minorPentatonic; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.mixolydian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.phrygian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.phrygian(\\pythagorean); a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.prometheus; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.scriabin; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.superLocrian; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; ) ( a = Scale.whole; a.degrees; // [ 0, 2, 4, 5, 7, 9, 11 ] a.semitones; // [ 0, 2, 4, 5, 7, 9, 11 ] a.cents; // [ 0, 200, 300, 500, 700, 900, 1100 ] a.ratios; // [ 1, 1.1224620483089, 1.2599210498937, 1.3348398541685, etc. ] Pbind(\\scale, a, \\degree, Pseq((0..7) ++ (6..0) ++ [\\rest], 1), \\dur, 0.25).play; )  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/introduction/logicalex/",
	"title": "Logical Expressions",
	"tags": [],
	"description": "",
	"content": "chapter 1 LE Logical Expressions in SuperCollider\nLogical expressions =true or false= 10==10 // equal to =\u0026gt;true... 10 !=15 // not equal to 10\u0026gt;5 // greater than 10\u0026lt;14 // less than 10 \u0026gt;= 10 // greater than or equal to 10 \u0026lt;= 10 // lees than or equal to 11.odd // it is odd 10.even // it is even 10.isInteger // it is integer 10.129.isFloat // it is float 1.odd.and(2.even) // both conditions 1.odd.or(1.even) // either condition  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/introduction/glossary/",
	"title": "Glossary",
	"tags": [],
	"description": "",
	"content": "chapter 1 Glossary Mathematics\npremise a statement that is assumed to be true.\nPhysics\nfrequency the number of times that a wave, especially a light, sound, or radio wave, is produced within a particular period, especially one second.\namplitude the distance between the top and the bottom of a wave.\nComputing-SC\nfunction lamda calculus\nSC Function a = { [100, 200, 300].choose };\nSC Event An Event is a SC Environment with a 'play' method. An Event specifies an action to be taken in response to a -play message.\nSC Pattern creates a Stream that iterates an array.\nSC Stream Streams represent sequences of values that are obtained one at a time.\nSC Pbind The pattern Pbind connects specific patterns with specific names. Consult its help page for details.\nMusic\nmotet Form of polyphonic vocal music (12th century)\n"
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/",
	"title": "Code Examples",
	"tags": [],
	"description": "",
	"content": "Chapter 2 SuperCollider examples of Sound Synthesis techniques and Algorithmic Composition.\n"
},
{
	"uri": "https://vasileios.github.io/ac-sc/introduction/references/",
	"title": "References",
	"tags": [],
	"description": "",
	"content": "Chapter 1 References Dean, Roger. and McLean, Alex (eds.) 2018. The Oxford Handbook of Algorithmic Music. Oxford University Press.\nFarnell, Andy. 2010. Designing Sound. Cambridge, Mass: The MIT Press.\nHoltzman, Steven. 1981. Generative Grammars for Music Composition. Computer Music Journal, Vol.5, No.1, pp. 51-64. The MIT Press.\nHusbands, Phil, Peter Copley, Alice Eldridge, and James Mandelis. 2007. ‘An Introduction to Evolutionary Computing for Musicians’. In Evolutionary Computer Music, 1–27. Springer, London. https://doi.org/10.1007/978-1-84628-600-1_1.\nΛώτης, Θ., Διαμαντόπουλος, Τ. 2015. Μουσική πληροφορική και μουσική με υπολογιστές. Εκδόσεις Κάλλιπος. [ηλεκτρ. βιβλ.] Αθήνα:Σύνδεσμος Ελληνικών Ακαδημαϊκών.\nMiranda, Eduardo R., and John Al Biles. 2007. Evolutionary Computer Music. Springer Science \u0026 Business Media.\nNierhaus, Gerhard. 2008. Algorithmic Composition: Paradigms of Automated Music Generation. 2009 edition. Wien ; New York: Springer.\nRoads, Curtis. 1996. The Computer Music Tutorial. Edition Unstated edition. Cambridge, Mass: The MIT Press.\nRoads, Curtis. 2004. Microsound. PAP/CDR edition. Cambridge, Mass.: The MIT Press.\nSethares, William A. 2004. Tuning, Timbre, Spectrum, Scale. 2nd edition. London: Springer.\nTolonen, T., Välimäki, V., and Karjalainen, M. 1998. Evaluation of Modern Sound Synthesis Methods. HUT.\nTrautmann, Lutz, and Rudolf Rabenstein. 2012. Digital Sound Synthesis by Physical Modeling Using the Functional Transformation Method. Springer Science \u0026 Business Media.\nSites  http://doc.sccode.org/ http://supercollider.github.io/tutorials/ http://chuck.cs.princeton.edu/doc/language/ http://chuck.cs.princeton.edu/doc/learn/ https://www.gnu.org/software/emacs/manual/ https://guides.github.com https://ccrma.stanford.edu/~blackrse/algorithm.html https://dictionary.cambridge.org/dictionary/english/algorithm http://digicult.it/digimag/issue-055/athanasius-kircher-arca-musarithmica-and https://www.youtube.com/watch?v=9Zdg6Ec4mVw https://www.npmjs.com/package/mozart-dice-game http://doc.sccode.org/Classes/Shaper.html http://doc.sccode.org/Classes/Wavetable.html http://doc.sccode.org/Browse.html#UGens%3EGranularSynthesis https://www.youtube.com/watch?v=MotG3XI2qSs http://chuck.cs.princeton.edu/release/ http://chuck.cs.princeton.edu/doc/learn/tutorial.html http://chuck.cs.princeton.edu/doc/program/ugen.html http://www.johncage.org/reunion/ https://www.youtube.com/watch?v=iPgwF3G5i4k https://getchip.com https://www.raspberrypi.org https://community.dur.ac.uk/nick.collins/teaching/supercollider/advanced/ machinelearningresources.scd https://composerprogrammer.com/researchml.html https://luuma.net/code https://www.cc.gatech.edu/~turk/bio_sim/articles/genetic_algorithm.pdf  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/supercollider/",
	"title": "SuperCollider",
	"tags": [],
	"description": "",
	"content": "chapter 2 SuperCollider SuperCollider\nFrom: SuperCollider\nBasics\nSuperCollider is a platform for audio synthesis and algorithmic composition, used by musicians, artists, and researchers working with sound. It is free and open source software available for Windows, macOS, and Linux.\nSuperCollider features three major components\n scsynth, a real-time audio server, forms the core of the platform. It features 400+ unit generators (\"UGens\") for analysis, synthesis, and processing. Its granularity allows the fluid combination of many known and unknown audio techniques, moving between additive and subtractive synthesis, FM, granular synthesis, FFT, and physical modelling. You can write your own UGens in C++, and users have already contributed several hundred more to the sc3-plugins repository. sclang, an interpreted programming language. It is focused on sound, but not limited to any specific domain. sclang controls scsynth via Open Sound Control. You can use it for algorithmic composition and sequencing, finding new sound synthesis methods, connecting your app to external hardware including MIDI controllers, network music, writing GUIs and visual displays, or for your daily programming experiments. It has a stock of user-contributed extensions called Quarks. scide is an editor for sclang with an integrated help system.  Code examples Find recordings folder\nthisProcess.platform.recordingsDir;  Sound synthesis techniques\nIntroduction to sound synthesis and sound design (origin, definition, procedures, application fields).\n  SuperCollider example:  Creating a sine wave  {SinOsc.ar(440, 0, 0.3)}.play    Additive synthesis  {SinOsc.ar(440, 0, 0.4)+SinOsc.ar(660, 0, 0.3)}.play;    Subtractive synthesis  {LPF.ar(Saw.ar(440, 0.4), [3520, 4400, 5280], 0.3)}.play;    Granular synthesis  SynthDef(\\granular, {|out = 0, trig = 1, dur = 0.1, sndbuf, pos = 0.2, rate = 1, pan = 0, amp = 0.4| var env, source; env = EnvGen.kr(Env.adsr, 1, doneAcion: 2); source = Out.ar(out, GrainBuf.ar(2, Impulse.kr(trig), dur, sndbuf, rate, pos, 2, pan, envbuf) * env) }).add;  Input Devices Musical gestures can be expressed through a wide range of body movements. Dozens of input devices have been developed to capture these gestures. (Roads 1996: 625)\n  Switch  Push buttons  Linear potentiometer or fader  Trackball  Joystick  Game Paddles  etc  Instrument design Bela\nCapacitive touch sensor-raspberry pi\nMPR121\n  To be continued...  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/oscillators/",
	"title": "Oscillators",
	"tags": [],
	"description": "",
	"content": "chapter 2 SuperCollider Oscillators SuperCollider Ugens From SC Help\n//Periodic Sources: Oscillators. //LF - \u0026quot;Low Frequency\u0026quot; Unit Generators. //arguments: frequency, phase, mul, add // parabolic approximation of sine { LFPar.ar(LFPar.kr(LFPar.kr(0.2,0,8,10),0, 400,800),0,0.1) }.scope(1, zoom: 4); // cubic approximation of sine { LFCub.ar(LFCub.kr(LFCub.kr(0.2,0,8,10),0, 400,800),0,0.1) }.scope(1, zoom: 4); { LFTri.ar(LFTri.kr(LFTri.kr(0.2,0,8,10),0, 400,800),0,0.1) }.scope(1, zoom: 4); { LFSaw.ar(LFSaw.kr(LFSaw.kr(0.2,0,8,10),0, 400,800),0,0.1) }.scope(1, zoom: 4); { Impulse.ar(LFTri.kr(LFTri.kr(0.2,0,8,10),0, 400,800),0,0.1) }.scope(1, zoom: 4); { LFPulse.ar(LFPulse.kr(LFPulse.kr(0.2,0,0.5,8,10),0,0.5, 400,800),0,0.5,0.1) }.scope(1, zoom: 4); //etc //Band Limited Oscillators //arguments: frequency, phase, mul, add SinOsc, FSinOsc, Blip, Saw, Pulse. { SinOsc.ar(SinOsc.kr(SinOsc.kr(0.2,0,8,10),0, 400,800),0,0.1) }.scope(1, zoom: 4); //etc //Table Oscillators //arguments: buffer number, frequency, phase, mul, add Osc, COsc, VOsc, VOsc3 - uses a buffer allocated on the server. ( b = Buffer.alloc(s, 2048, 1, bufnum: 80); b.sine1(1.0/(1..6), true, true, true); ) { Osc.ar(80, 100, 0, 0.1) }.scope(1, zoom:4); b.sine1(1.0/(1..12)); b.sine1(1.0/(1..24)); b.sine1(1.0/(1..32)); b.sine1([1.0/(1,3..12), 0].flop.flat.postln); //etc //Chaotic Noise Generators //arguments: chaosParam, mul, add { Crackle.ar(MouseX.kr(1,2), 0.5) }.scope(1);  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/aperiodicsources/",
	"title": "Noise",
	"tags": [],
	"description": "",
	"content": "chapter 2 SuperCollider Noise Generators Aperiodic Sources: Noise\n/Aperiodic Sources: Noise. //LF \u0026quot;Low Frequency\u0026quot; Noise Generators. //arguments: frequency, mul, add { LFClipNoise.ar(MouseX.kr(200, 10000, 1), 0.125) }.scope(1); { LFPar.ar(LFClipNoise.kr(MouseX.kr(0.5, 64, 1), 200, 400), 0, 0.2) }.scope(1, zoom:8); //Broad Spectrum Noise Generators //arguments: mul, add { ClipNoise.ar(0.2) }.scope(1); { WhiteNoise.ar(0.2) }.scope(1); { PinkNoise.ar(0.4) }.scope(1); { BrownNoise.ar(0.2) }.scope(1); { GrayNoise.ar(0.2) }.scope(1); // Impulse Noise Generators //Dust, Dust2 //arguments: density, mul, add { Dust.ar(MouseX.kr(1,10000,1), 0.4) }.scope(1, zoom:4); //etc //Chaotic Noise Generators //Crackle //arguments: chaosParam, mul, add { Crackle.ar(MouseX.kr(1,2), 0.5) }.scope(1);  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/filters/",
	"title": "Filters",
	"tags": [],
	"description": "",
	"content": "chapter 2 SuperCollider Filters Filters in SuperCollider\n// Filters //Low Pass, High Pass //arguments: in, freq, mul, add { LPF.ar(WhiteNoise.ar, MouseX.kr(1e2,2e4,1), 0.2) }.scope(1); { HPF.ar(WhiteNoise.ar, MouseX.kr(1e2,2e4,1), 0.2) }.scope(1); // Resonant Low Pass, High Pass, Band Pass //arguments: in, freq, rq, mul, add { RLPF.ar(WhiteNoise.ar, MouseX.kr(1e2,2e4,1), 0.2, 0.2) }.scope(1); { RHPF.ar(WhiteNoise.ar, MouseX.kr(1e2,2e4,1), 0.2, 0.2) }.scope(1); // Resonz - resonant band pass filter with uniform amplitude //arguments: in, freq, rq, mul, add // modulate frequency { Resonz.ar(WhiteNoise.ar(0.5), XLine.kr(1000,8000,10), 0.05) }.scope(1); //Ringz - ringing filter. //arguments: in, frequency, ring time, mul, add { Ringz.ar(Dust.ar(3, 0.3), 2000, 2) }.scope(1, zoom:4); //NonLinear Filters // a signal with impulse noise. { Saw.ar(500, 0.1) + Dust2.ar(100, 0.9) }.scope(1); // after applying median filter { Median.ar(3, Saw.ar(500, 0.1) + Dust2.ar(100, 0.9)) }.scope(1); // a signal with impulse noise. { Saw.ar(500, 0.1) + Dust2.ar(100, 0.9) }.scope(1); // after applying slew rate limiter { Slew.ar(Saw.ar(500, 0.1) + Dust2.ar(100, 0.9),1000,1000) }.scope(1); //Formant Filter - Formlet - A filter whose impulse response is similar to a FOF grain. { Formlet.ar(Impulse.ar(MouseX.kr(2,300,1), 0, 0.4), 800, 0.01, 0.1) }.scope(1, zoom:4); // Klank - resonant filter bank //arguments: `[ frequencies, amplitudes, ring times ], mul, add { Klank.ar(`[[200, 671, 1153, 1723], nil, [1, 1, 1, 1]], Impulse.ar(2, 0, 0.1)) }.play;  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/distortion/",
	"title": "Distortion",
	"tags": [],
	"description": "",
	"content": "chapter 2 SuperCollider Distorion // Distortion { SinOsc.ar(300, 0, 0.2) }.scope(1); { SinOsc.ar(300, 0, 0.2).abs }.scope(1); { SinOsc.ar(300, 0, 0.2).max(0) }.scope(1); { SinOsc.ar(300, 0).squared * 0.2 }.scope(1); { SinOsc.ar(300, 0).cubed * 0.2 }.scope(1); { SinOsc.ar(300, 0, MouseX.kr(0.1,80,1)).distort * 0.2 }.scope(1); { SinOsc.ar(300, 0, MouseX.kr(0.1,80,1)).softclip * 0.2 }.scope(1); { SinOsc.ar(300, 0, MouseX.kr(0.1,80,1)).clip2(1) * 0.2 }.scope(1); { SinOsc.ar(300, 0, MouseX.kr(0.1,80,1)).fold2(1) * 0.2 }.scope(1); { SinOsc.ar(300, 0, MouseX.kr(0.1,80,1)).wrap2(1) * 0.2 }.scope(1); { SinOsc.ar(300, 0, MouseX.kr(0.1,80,1)).wrap2(1) * 0.2 }.scope(1); // waveshaping by phase modulating a 0 Hz sine oscillator ( { var in; in = SinOsc.ar(300, 0, MouseX.kr(0.1,8pi,1)); SinOsc.ar(0, in, 0.2); // 0 Hz sine oscillator }.scope(1); ) //Shaper - input is used to look up a value in a table. //Chebyshev polynomials are typically used to fill the table. s.sendMsg(\\b_alloc, 80, 1024); // allocate table // fill with chebyshevs s.listSendMsg([\\b_gen, 80, \\cheby, 7] ++ {1.0.rand2.squared}.dup(6)); { Shaper.ar(80, SinOsc.ar(600, 0, MouseX.kr(0,1))) * 0.3; }.scope(1); s.listSendMsg([\\b_gen, 80, \\cheby, 7] ++ {1.0.rand2.squared}.dup(6)); s.listSendMsg([\\b_gen, 80, \\cheby, 7] ++ {1.0.rand2.squared}.dup(6));  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/delays/",
	"title": "Delays",
	"tags": [],
	"description": "",
	"content": "chapter 2 SuperCollider Delays //Delays and Buffer UGens DelayN, DelayL, DelayC - simple delays N - no interpolation L - linear interpolation C - cubic interpolation arguments: in, maximum delay time, current delay time, mul, add ( // Dust randomly triggers Decay to create an exponential // decay envelope for the WhiteNoise input source { z = Decay.ar(Dust.ar(1,0.5), 0.3, WhiteNoise.ar); DelayN.ar(z, 0.1, 0.1, 1, z); // input is mixed with delay via the add input }.scope(1, zoom: 4) ) // CombN, CombL, CombC - feedback delays //arguments: in, maximum delay time, current delay time, echo decay time, mul, add // used as an echo. { CombN.ar(Decay.ar(Dust.ar(1,0.5), 0.2, WhiteNoise.ar), 0.2, 0.2, 3) }.scope(1, zoom:4); // Comb used as a resonator. The resonant fundamental is equal to // reciprocal of the delay time. { CombN.ar(WhiteNoise.ar(0.02), 0.01, XLine.kr(0.0001, 0.01, 20), 0.2) }.scope(1); { CombL.ar(WhiteNoise.ar(0.02), 0.01, XLine.kr(0.0001, 0.01, 20), 0.2) }.scope(1); { CombC.ar(WhiteNoise.ar(0.02), 0.01, XLine.kr(0.0001, 0.01, 20), 0.2) }.scope(1); // with negative feedback: { CombN.ar(WhiteNoise.ar(0.02), 0.01, XLine.kr(0.0001, 0.01, 20), -0.2) }.scope(1); { CombL.ar(WhiteNoise.ar(0.02), 0.01, XLine.kr(0.0001, 0.01, 20), -0.2) }.scope(1); { CombC.ar(WhiteNoise.ar(0.02), 0.01, XLine.kr(0.0001, 0.01, 20), -0.2) }.scope(1); { CombC.ar(Decay.ar(Dust.ar(1,0.1), 0.2, WhiteNoise.ar), 1/100, 1/100, 3) }.play; { CombC.ar(Decay.ar(Dust.ar(1,0.1), 0.2, WhiteNoise.ar), 1/200, 1/200, 3) }.play; { CombC.ar(Decay.ar(Dust.ar(1,0.1), 0.2, WhiteNoise.ar), 1/300, 1/300, 3) }.play; { CombC.ar(Decay.ar(Dust.ar(1,0.1), 0.2, WhiteNoise.ar), 1/400, 1/400, 3) }.scope(1, zoom:4); //etc //PlayBuf - buffer playback //arguments: numChannels, buffer number, rate, trigger, start pos, loop // read sound b = Buffer.read(s, Platform.resourceDir +/+ \u0026quot;sounds/a11wlk01.wav\u0026quot;); { SinOsc.ar(800 + (700 * PlayBuf.ar(1,b, BufRateScale.kr(b), loop:1)),0,0.3) }.scope(1); // loop is true { PlayBuf.ar(1,b, BufRateScale.kr(b), loop:1) }.scope(1);  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/spectral/",
	"title": "Spectral",
	"tags": [],
	"description": "",
	"content": "chapter 2 SuperCollider Spectral FFT-PV_Ugens\nFFT, IFFT and the phase vocoder ugens. FFT calculates the spectrum of a sound, puts it into a buffer, and outputs a trigger each time the buffer is ready to process. The PV UGens process the spectrum when they receive the trigger. IFFT converts the spectrum back into sound.\n// alloc a buffer for the FFT b = Buffer.alloc(s,2048,1); // read a sound c = Buffer.read(s, Platform.resourceDir +/+ \u0026quot;sounds/a11wlk01.wav\u0026quot;); ( // do nothing { var in, chain; in = PlayBuf.ar(1,c, BufRateScale.kr(c), loop:1); chain = FFT(b, in); 0.5 * IFFT(chain); }.scope(1); ) ( // pass only magnitudes above a threshold { var in, chain; in = PlayBuf.ar(1,c, BufRateScale.kr(c), loop:1); chain = FFT(b, in); chain = PV_MagAbove(chain, MouseX.kr(0.1,512,1)); 0.5 * IFFT(chain); }.scope(1); ) ( // pass only magnitudes below a threshold { var in, chain; in = PlayBuf.ar(1,c, BufRateScale.kr(c), loop:1); chain = FFT(b, in); chain = PV_MagBelow(chain, MouseX.kr(0.1,512,1)); 0.5 * IFFT(chain); }.scope(1); ) ( // brick wall filter. { var in, chain; in = PlayBuf.ar(1,c, BufRateScale.kr(c), loop:1); chain = FFT(b, in); chain = PV_BrickWall(chain, MouseX.kr(-1,1)); 0.5 * IFFT(chain); }.scope(1); ) ( // pass random frequencies. Mouse controls how many to pass. // trigger changes the frequencies periodically { var in, chain; in = PlayBuf.ar(1,c, BufRateScale.kr(c), loop:1); chain = FFT(b, in); chain = PV_RandComb(chain, MouseX.kr(0,1), Impulse.kr(0.4)); 0.5 * IFFT(chain); }.scope(1); ) ( // rectangular comb filter { var in, chain; in = PlayBuf.ar(1,c, BufRateScale.kr(c), loop:1); chain = FFT(b, in); chain = PV_RectComb(chain, 8, MouseY.kr(0,1), MouseX.kr(0,1)); 0.5 * IFFT(chain); }.scope(1); ) ( // freeze magnitudes { var in, chain; in = PlayBuf.ar(1,c, BufRateScale.kr(c), loop:1); chain = FFT(b, in); chain = PV_MagFreeze(chain, LFPulse.kr(1, 0.75)); 0.5 * IFFT(chain); }.scope(1); )  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/sc-examples/granularsynthesis/",
	"title": "Granular Synthesis",
	"tags": [],
	"description": "",
	"content": "chapter 2 SuperCollider Granular Synthesis //TGrains - granulation of a buffer //arguments: numChannels, trigger, buffer number, rate, center pos, dur, pan, amp, interpolation // read sound b = Buffer.read(s, Platform.resourceDir +/+ \u0026quot;sounds/a11wlk01.wav\u0026quot;); ( { var trate, dur; trate = MouseY.kr(2,200,1); dur = 4 / trate; TGrains.ar(2, Impulse.ar(trate), b, 1, MouseX.kr(0,BufDur.kr(b)), dur, 0, 0.1, 2); }.scope(2, zoom: 4); ) ( { var trate, dur, clk, pos, pan; trate = MouseY.kr(8,120,1); dur = 12 / trate; clk = Impulse.kr(trate); pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk); pan = WhiteNoise.kr(0.6); TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.1); }.scope(2, zoom: 4); ) // 4 channels ( { var trate, dur, clk, pos, pan; trate = MouseY.kr(8,120,1); dur = 12 / trate; clk = Impulse.kr(trate); pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk); pan = WhiteNoise.kr(0.6); TGrains.ar(4, clk, b, 1, pos, dur, pan, 0.1); }.scope(4, zoom: 4); ) ( { var trate, dur, clk, pos, pan; trate = MouseY.kr(8,120,1); dur = 4 / trate; clk = Dust.kr(trate); pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk); pan = WhiteNoise.kr(0.6); TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.1); }.scope(2, zoom: 4); ) ( { var trate, dur, clk, pos, pan; trate = LinExp.kr(LFTri.kr(MouseY.kr(0.1,2,1)),-1,1,8,120); dur = 12 / trate; clk = Impulse.ar(trate); pos = MouseX.kr(0,BufDur.kr(b)); pan = WhiteNoise.kr(0.6); TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.1); }.scope(2, zoom: 4); ) ( { var trate, dur, clk, pos, pan; trate = 12; dur = MouseY.kr(0.2,24,1) / trate; clk = Impulse.kr(trate); pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk); pan = WhiteNoise.kr(0.6); TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.1); }.scope(2, zoom: 4); ) ( { var trate, dur, clk, pos, pan; trate = 100; dur = 8 / trate; clk = Impulse.kr(trate); pos = Integrator.kr(BrownNoise.kr(0.001)); pan = WhiteNoise.kr(0.6); TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.1); }.scope(2, zoom: 4); ) ( { var trate, dur, clk, pos, pan; trate = MouseY.kr(1,400,1); dur = 8 / trate; clk = Impulse.kr(trate); pos = MouseX.kr(0,BufDur.kr(b)); pan = WhiteNoise.kr(0.8); TGrains.ar(2, clk, b, 2 ** WhiteNoise.kr(2), pos, dur, pan, 0.1); }.scope(2, zoom: 4); ) ( { var trate, dur; trate = MouseY.kr(2,120,1); dur = 1.2 / trate; TGrains.ar(2, Impulse.ar(trate), b, (1.2 ** WhiteNoise.kr(3).round(1)), MouseX.kr(0,BufDur.kr(b)), dur, WhiteNoise.kr(0.6), 0.1); }.scope(2, zoom: 4); ) // free sound b.free;  "
},
{
	"uri": "https://vasileios.github.io/ac-sc/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://vasileios.github.io/ac-sc/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]