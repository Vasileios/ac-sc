+++
title = "Sound synthesis techniques"
chapter = true
weight = 60
+++

*** chapter 2

**** Additive synthesis

#+BEGIN_SRC js
/* Sound Synthesis techniques
BA 181902
Objective: create complex sounds using additive synthesis technique
// Additive Synthesis
a+b+c+d
where a to d  can be frequencies or any other object such as a waveform
*/

// firts boot the internal server and open Freqscope and Stethoscope

s = Server.internal;
s.boot
Stethoscope.new
FreqScope.new

//create harmonics of a 440Hz A note  

{SinOsc.ar([440, 880, 880*3/2, 1600*4/3, 2000], 0, [0.6, 0.1, 0.09, 0.08, 0.09])}.play//or .scope

//add frequencies using the Mix Ugen

{Mix.fill(10, {SinOsc.ar(440+460.rand, 0, 0.03)})}.play;

//Add also different waveforms i.e sawtooth waveforms 

{Mix.fill(10, {SinOsc.ar(440+440.rand, 0, 0.03)}, {Saw.ar(440+440.rand, 0.01)})}.play;


// a more complex sound

{Mix.fill(10, {SinOsc.ar(440+640.rand, 0, 0.03)+Saw.ar(440+460.rand, 0.01)}, {Saw.ar(440+880.rand, 0.01)})}.play;


#+END_SRC

**** Physical Modeling*

*Digital waveguide synthesis*

#+BEGIN_SRC js

/*
BA102002
Physical Modeling
Digital waveguide synthesis: superposition of 2 waves (right going and left going waves) 
modal synthesis (resonant modes of vibration of acoustic systems)(vibrating systems)
delay line (Using delays and filters to model the propagation of sound wave - geometry of the waveguide)
mass-spring models (signals based on masses and springs)

See more on: JA Laird., 2001. The Physical Modelling of Drums Using Digital Waveguides. University of Bristol
*/

/*
Instruction:
Envelope (sound behaviour - time domain), Impulse (trigger), NoiseGen (texture), CombL (delay line)
*/
//see Ball, TBall, Spring Ugens on Help
//TBall
//Example:1 
// mouse x controls switch of level
// mouse y controls gravity
(
{
    var t, sf;
    sf = K2A.ar(MouseX.kr > 0.5) > 0;
    t = TBall.ar(sf, MouseY.kr(0.01, 1.0, 1), 0.01);
    Pan2.ar(Ringz.ar(t * 10, 1200, 0.1), MouseX.kr(-1,1));
}.play;
)


//spring


(
{
    var inforce, outforce, freq, k, d;
    inforce = K2A.ar(MouseButton.kr(0,1,0)) > 0;
    k = MouseY.kr(0.1, 20, 1);
    d = MouseX.kr(0.00001, 0.1, 1);
    outforce = Spring.ar(inforce, k, d);
    freq = outforce * 400 + 500; // modulate frequency with the force
    SinOsc.ar(freq, 0, 0.2)
}.play;
)

#+END_SRC

*Wave shaping*

#+BEGIN_SRC js
/*
BA 182202
Waveshaping examples
Objective: create a wavetable and shape the waveform
*/

s.boot;
//Fill this buffer with a series of Chebyshev polynomials, see more on Help->Buffer
b = Buffer.alloc(s, 512, 1, { |buf| buf.chebyMsg([1,0,1,1,0,1])});

(
{
    Shaper.ar(
        b,
        SinOsc.ar(300, 0, Line.kr(0,1,6)+Saw.ar(304, Line.kr(0, 1, 6))),
        0.5
    )
}.scope;
)

b.free;

//another example with sine wave series
//Fill this buffer with a series of sine wave partials using specified frequencies, amplitudes, and initial phases.
b = Buffer.alloc(s, 512, 1, { |buf| buf.sine1Msg([1,0,1,1,0,1])});
//see also sine2 and 3

(
{
    Shaper.ar(
        b,
        SinOsc.ar(300+305.rand, 0, LFNoise2.kr(0+0.15)+Saw.ar(304+30.7.rand, LFNoise2.kr(0.15))),
        0.5
    )
}.scope;
)

b.free;

//another example

b = Buffer.alloc(s, 512, 1, { |buf| buf.sine1Msg(1.0/[1,2,3,4,5,6,7,8,9,10])});
//check also with other tables. 
//Combine tables
//b = Buffer.alloc(s, 512, 1, { |buf| buf.chebyMsg([1,0,1,1,0,1])});
//b = Buffer.alloc(s, 512, 1, { |buf| buf.sine1Msg([1,0,1,1,0,1])});

(
{
    Shaper.ar(
        b,
        SinOsc.ar(300+305.rand, 0, LFNoise2.kr(0+0.15.rand)+Saw.ar(304+307.rand, LFNoise2.kr(0.15.rand)))+PinkNoise.ar(0.1.rand),
        0.5
    )
}.scope;
)

b.free;
#+END_SRC

*Creating textures with wavetables*

#+BEGIN_SRC js

/*
BA 182202
Sound Textures examples
Objective: Experiment with table oscilators to create sound textures
*/

// COsc wavetable example 1:

(
b = Buffer.alloc(s, 512, 1, {| buf | buf.sine1Msg(1.0/[1,2,3,4,5,6,7,8,9,10])});
{ LPF.ar(COsc.ar(b.bufnum, [200.rand.postln, 1000.rand], 0.7, 0.25)*Saw.ar(440+444.rand, WhiteNoise.kr(0.7)), 4000) }.play;
)


#+END_SRC
