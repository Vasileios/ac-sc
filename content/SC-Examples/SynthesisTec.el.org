+++
title = "Sound synthesis techniques"
chapter = true
weight = 60
+++

*** chapter 2

**** Additive synthesis

#+BEGIN_SRC js
/* Sound Synthesis techniques
BA 181902
Objective: create complex sounds using additive synthesis technique
// Additive Synthesis
a+b+c+d
where a to d  can be frequencies or any other obect such as a waveform
*/

// firts boot the internal server and open Freqscope and Stethoscope

s = Server.internal;
s.boot
Stethoscope.new
FreqScope.new

//create harmonics of a 440Hz A note  

{SinOsc.ar([440, 880, 880*3/2, 1600*4/3, 2000], 0, [0.6, 0.1, 0.09, 0.08, 0.09])}.play//or .scope

//add frequencies using the Mix Ugen

{Mix.fill(10, {SinOsc.ar(440+440.rand, 0, 0.03)})}.play;

//Add also different waveforms i.e sawtooth waveforms 

{Mix.fill(10, {SinOsc.ar(440+440.rand, 0, 0.03)}, {Saw.ar(440+440.rand, 0.01)})}.play;


// a more complex sound

{Mix.fill(10, {SinOsc.ar(440+640.rand, 0, 0.03)+Saw.ar(440+460.rand, 0.01)}, {Saw.ar(440+880.rand, 0.01)})}.play;


#+END_SRC

*Physical Modeling*

#+BEGIN_SRC js

/*
BA102002
Physical Modeling
modal synthesis (models of vibration of acoustic systems)
delay line (Using delays and filters to model the propagation of sound wave)
mass-spring models (signals based on masses and springs)
*/

/*
Envelope (sound behaviour - time domain), Impulse (trigger), NoiseGen (texture), CombL (delay line)
*/


#+END_SRC

*Wave shaping*

#+BEGIN_SRC js
/*
BA 182202
Waveshaping examples
Objective: create a wavetable and shape the waveform
*/

s.boot;
//Fill this buffer with a series of Chebyshev polynomials,
b = Buffer.alloc(s, 512, 1, { |buf| buf.chebyMsg([1,0,1,1,0,1])});

(
{
    Shaper.ar(
        b,
        SinOsc.ar(300, 0, Line.kr(0,1,6)+Saw.ar(304, Line.kr(0, 1, 6))),
        0.5
    )
}.scope;
)

b.free;

//another example with sine series
//Fill this buffer with a series of sine wave partials using specified frequencies, amplitudes, and initial phases.
b = Buffer.alloc(s, 512, 1, { |buf| buf.sine1Msg([1,0,1,1,0,1])});
//see also sine2 and 3

(
{
    Shaper.ar(
        b,
        SinOsc.ar(300+305.rand, 0, LFNoise2.kr(0+0.15)+Saw.ar(304+30.7.rand, LFNoise2.kr(0.15))),
        0.5
    )
}.scope;
)

b.free;

//another example


//b = Buffer.alloc(s, 512, 1, { |buf| buf.chebyMsg([1,0,1,1,0,1])});
b = Buffer.alloc(s, 512, 1, { |buf| buf.sine1Msg([1,0,1,1,0,1])});
//see also sine2 and 3

(
{
    Shaper.ar(
        b,
        SinOsc.ar(300+305.rand, 0, LFNoise2.kr(0+0.15.rand)+Saw.ar(304+30.7.rand, LFNoise2.kr(0.15.rand))),
        0.5
    )
}.scope;
)

b.free;
#+END_SRC
